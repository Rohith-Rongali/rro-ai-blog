{
  
    
        "post0": {
            "title": "Reportee19b114",
            "content": "EE2016 part-c assignment report . 1. FIR Filters . FIR-“Finite Impulse Response “ filters, one of the two primary filters are those which have a finite impulse response. . The impulse response is characterised by a set of filter coeffecients/tap weights. I have implemented a 5-tap and 32-tap bandpass FIR filter which are characterised by 5 and 32 filter coefficients respectively. . For a given sequence of inputs “x[n]”, the output “y[n]” from the filter(with impulse response “h[n]”) is given by the convolution of “x[n]” and “h[n]”. . y[n]=x[n]*h[n] . y[n]=x[n].a(0)+x[n-1].a(1)+….+x[n-N+1].a(N-1). . a(0),a(1)…. are filter coefficients and N is the no. of taps. . The number of Taps usually indicates the memory required, the amount of calculations to done while implementing and most importantly it means we will get a better passband. . DTFT is applied to the outputs(y[n]) obtained from the AVR program which will allow us to see the working of the filter. . y[n]——&gt; Y(jw) . 2. FIXED POINT ARTHIMATIC . b7 b6 b5 b4 b3 b2 b1 b0 . 1 | 0.5 | 0.25 | 0.125 | 2^{-4} | 2^{-5} | 2^{-6} | 2^{-7} | . The above is the fixed point representation used by me for the 8-bit no.’s in AVR. This can represent signed numbers in the range of [-1,1) in two’s complement form. . The filter coefficients and the input samples are represented by 8-bits in the above described notation so that we can use FMULS(fractional multiplication for signed numbers). This is ok because all the filter coefficients and the inputs are in the range of [-1,1), except for the DC signal inputs which should be equal to one is represented by an approximate number= 0111 1111 in decimal is equal to 0.99 . . 3. DTFT . import numpy as np from scipy.fft import fft import matplotlib.pyplot as plt y=np.array(OUTPUT_list) N = 1004 # sample spacing T = 1.0 / 8000.0 x = np.linspace(0.0, N*T, N) yf = fft(y) xf = np.linspace(0.0, 1.0/(2.0*T), N//2) import matplotlib.pyplot as plt plt.plot(xf, 2.0/N * np.abs(yf[0:N//2])) plt.grid() plt.show() . The above code is taken from https://docs.scipy.org/doc/scipy/reference/tutorial/fft.html . 4. IMPLEMENTATION DETAILS . a. Inputs and output storage locations, coefficients and circular buffer locations . I’ve considered 1000 samples for each of the three cases which I’ve inputted in 4 batches of nearly 250 each.(given the limitations of the memory size) . For maintaining continuity between each of the batches , last four samples from previous batch are taken to really represent the convolution between the 1000 inputs and the coefficients. . input batch no. of inputs . Batch1 | 4 zeroes+250samples = 254inputs | . Batch2 | 4 last samples from batch1 + 250 samples = 254 inputs | . Batch3 | 4 last samples from batch2 + 250 samples = 254 inputs | . Batch4 | 4 last samples from batch3 + 250 samples +4 zeroes = 254 inputs | . Shows the input in 32-tap filter program . The input is given as in the the above image, the first few numbers(5 or 32) are the coefficients and the rest are inputs. . For 5-tap filter : . The image shows the addresses for 5-tap coefficients and input buffer. . Location to store output of 5-tap . values highlighted in yellow : coefficients, green: circular buffer, blue: the outputs . The above image shows the memory during implementation of some batch of input for a 5-tap filter. . For 32-tap filter : . The image shows the addresses for 32-tap coefficients and input circular buffer. . Location to store output of 32-tap: . The output location . yellow: buffer location (when loaded with dc inputs), green: coefficients storage space . In both the programs, I used X-pointer for retrieving coefficient values while I used Y-pointer for 2 purposes i.e. for accessing output locations as well as for working with the buffer. For doing so I used registers “R11,R12” for maintaining the address of output locations, and register “R19” for the buffer location(the buffer location was defined with addresses under 1 byte). . b. Circular buffer . The circular buffer is an array of twice the size of the values required so it will be 10 bytes for 5-tap and 64 bytes for 32-tap, the first half and the second half are identical. So that we can do seamless incrementing(5 or 32-times) starting from a location in first half and read the entire buffer, similarly while decrementing from a location in second half. The working is more clearly illustrated below: .                     . a0 | a1 | a2 | a3 | a4 | a0 | a1 | a2 | a3 | a4 | . a5 | a1 | a2 | a3 | a4 | a5 | a1 | a2 | a3 | a4 | . a5 | a6 | a2 | a3 | a4 | a5 | a6 | a2 | a3 | a4 | . a5 | a6 | a7 | a3 | a4 | a5 | a6 | a7 | a3 | a4 | . a5 | a6 | a7 | a8 | a4 | a5 | a6 | a7 | a8 | a4 | .   |   |   |   |   |   |   |   |   |   | . a5 | a6 | a7 | a8 | a9 | a5 | a6 | a7 | a8 | a9 | . a10 | a6 | a7 | a8 | a9 | a10 | a6 | a7 | a8 | a9 | . a10 | a11 | a7 | a8 | a9 | a10 | a11 | a7 | a8 | a9 | . Here the values in bold are the oldest values in the buffer, so if we maintain a pointer to address of one of the two old values say the old value in the right half, it will be enough, since the left one’s address is always 5 less than the right one. And in both my programs I used R19 register to keep track of the old value in the right half. . To update the buffer replace the old values with the new one and increment the R19 to point to the next oldest value, also if we reach the end of buffer , instead of incrementing, load the address of the starting of right half of the buffer(as in the above figure it is moved from a4 to a5 when we reach the end). . To read the contents of the buffer: . from the oldest value to the newest, we start from the oldest value in left half(whose address can be obtained by subtracting 5 from R19) and go on incrementing for 5 times to get all the 5 values in the buffer. . from the newest value to the oldest, we pre-decrement starting from the oldest value in the right half(pointed by R19) for 5 times to get all the values in the buffer. . The above explanation can be extended to buffer of any size and hence for the 32-tap case as well. . c. Details of the multiplication . The coefficients and inputs as mentioned before are 8 bit signed no.’s in range [-1,1), their multiplication(which will still be in the range [-1,1) ) by “FMULS” gives the output of 16-bit in the registers R0,R1 where the extra byte(lowerbyte:R0) increases the precision of the decimal , R1 has the same fixed point notation mentioned before. . b7 b6 b5 b4 b3 b2 b1 b0 . 1 | 0.5 | 0.25 | 0.125 | 2^{-4} | 2^{-5} | 2^{-6} | 2^{-7} | . this is for the upper byte R1. . b7 b6 b5 b4 b3 b2 b1 b0 . 2^{-8} | 2^{-9} | 2^{-10} | 2^{-11} | 2^{-12} | 2^{-13} | 2^{-14} | 2^{-15} | . This is for the lower byte R0. . The result is accumulated in R4,R5 and if any carry results while addition is stored in R6. . For 5-tap five such multiplication results are added and accumulated in each MAC cycle, similarly 32 for 32-tap. While adding, it will be like adding unsigned numbers. So, a register R3 is maintained to keep track of the number of negative values resulted from multiplication, and subtract R3 from R6 to get the correct result. . d. A brief of the program logic . If ‘N’ inputs are given ‘N-4’ MAC cycles are needed and each MAC cycle is iterated 5 or 32 times. . X-pointer initially points to start of the coefficients buffer, and after one MAC cycle it points to the end .So, in next MAC cycle we keep decrementing to reach the start of the buffer,and the same thing repeats. So, the pointer moves from a(0) to a(4) and a(4) to a(0) in alternate cycles. Accordingly to this the pointer to input circular buffer must move from newest value to oldest value and oldest value to newest value in alternate cycles. To identify this we maintain a register initially equal to zero and one’s complement this register after each MAC cycle. Based on the value in this register the flow of input access and the coefficient access is decided at the start of each cycle. . R22 is used for this purpose of identifying the flow of memory access . Below are the instructions at the end of each MAC cycle initialising the y pointer for next MAC cycle for input access and also complements the bits in R22 to change the flow of memory access in the next MAC cycle. . . Finally at the end of each MAC cycle, the output from R6,R5 are stored to locations in the registers R11,R12. And also the addresses in them are incremented for the outputs of the next MAC cycle. . . 5.RESULTS . a. Input and output plot . input: blue, output: yellow . . input: blue, output: red . . input: blue, output: red . . input: blue, output: red . . input: blue, output: red . . input: blue, output: red . . b. Frequency response plots . 1.DC signal: . . . . 2.SINE @ 1800Hz: . . . . 3. White noise: . . . .",
            "url": "https://rohith-rongali.github.io/rro-ai-blog/2020/11/09/reportee19b114.html",
            "relUrl": "/2020/11/09/reportee19b114.html",
            "date": " • Nov 9, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "EE2016 part-c assignment report",
            "content": "",
            "url": "https://rohith-rongali.github.io/rro-ai-blog/2020/11/09/Report.html",
            "relUrl": "/2020/11/09/Report.html",
            "date": " • Nov 9, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "COVID-19 India Matplotlib Overview",
            "content": "India . Last update: 28-Jul-20 . Confirmed cases: . 1514800 (+49001) . Confirmed deaths: . 34121 (+770) . states Cases Deaths PCases PDeaths Cases (+) Deaths (+) Fatality Rate Maharashtra 391440 14164 383723 13882 7717 282 3.62 Tamil Nadu 227688 3659 220716 3571 6972 88 1.61 Delhi 132275 3881 131219 3853 1056 28 2.93 Andhra Pradesh 110297 1148 102349 1090 7948 58 1.04 Karnataka 107001 2064 101465 1962 5536 102 1.93 Uttar Pradesh 73951 1497 70493 1456 3458 41 2.02 West Bengal 62964 1449 60830 1411 2134 38 2.30 Gujarat 57982 2372 56874 2348 1108 24 4.09 Telangana 57142 480 55532 471 1610 9 0.84 Bihar 43591 269 41111 255 2480 14 0.62 Rajasthan 38636 644 37564 633 1072 11 1.67 Assam 34846 92 33475 90 1371 2 0.26 Haryana 32876 406 32127 397 749 9 1.23 Madhya Pradesh 29217 831 28589 821 628 10 2.84 Orissa 28107 189 26892 181 1215 8 0.67 Kerala 20895 68 19728 64 1167 4 0.33 Jammu and Kashmir 18879 333 18390 321 489 12 1.76 Punjab 14378 336 13769 318 609 18 2.34 Jharkhand 9563 94 8803 90 760 4 0.98 Goa 5287 36 5119 36 168 0 0.68 Tripura 4287 21 4066 17 221 4 0.49 Pondicherry 3013 47 2874 43 139 4 1.56 Himachal Pradesh 2330 13 2270 13 60 0 0.56 Manipur 2317 0 2286 0 31 0 0.00 Nagaland 1460 4 1385 5 75 0 0.27 Arunachal Pradesh 1330 3 1239 3 91 0 0.23 Chandigarh 934 14 910 14 24 0 1.50 Meghalaya 779 5 738 5 41 0 0.64 Sikkim 592 1 568 1 24 0 0.17 Mizoram 384 0 361 0 23 0 0.00 Andaman and Nicobar Islands 359 1 334 1 25 0 0.28 Daman and Diu 0 0 0 0 0 0 NaN Lakshadweep 0 0 0 0 0 0 NaN .",
            "url": "https://rohith-rongali.github.io/rro-ai-blog/2020/08/08/covid19.html",
            "relUrl": "/2020/08/08/covid19.html",
            "date": " • Aug 8, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://rohith-rongali.github.io/rro-ai-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://rohith-rongali.github.io/rro-ai-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://rohith-rongali.github.io/rro-ai-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rohith-rongali.github.io/rro-ai-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}